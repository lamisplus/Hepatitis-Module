import { useFormik } from "formik";
import * as yup from "yup";

const invalidTextPrompt = "Invalid input type";
const requiredTextPrompt = "field is required";

export const useValidateForm1ValuesHook = (onSubmit) => {
  const form1InitialValues = {
    stateId: "",
    otherName: "",
    countryId: "",
    coreEntryPoint: "",
    pregnancy: "",
    weight: "",
    height: "",
    hepatitisB: "",
    breastfeeding: "",
    historyOfUsingAbusedSubstance: "",
    dateOfFirstHepatitisBPositiveScreening: "",
    hepatitisC: "",
    surname: "",
    firstName: "",
    dateOfBirth: "",
    maritalStatusId: "",
    phone: "",
    ninNumber: "",
    isDateOfBirthEstimated: "",
    educationId: "",
    employmentStatusId: "",
    dateOfRegistration: "",
  };

  const Form1ValidationSchema = yup.object({
    stateId: yup.number(),
    countryId: yup.number(),
    educationId: yup.number(),
    employmentStatusId: yup.number(),
    coreEntryPoint: yup.string(),
    pregnancy: yup.string(),
    weight: yup.number(),
    height: yup.number(),
    hepatitisB: yup.string(),
    breastfeeding: yup.string(),
    historyOfUsingAbusedSubstance: yup.string(),
    dateOfFirstHepatitisBPositiveScreening: yup.date(),
    hepatitisC: yup.string(),
    surname: yup.string(),
    firstName: yup.string(),
    otherName: yup.string(),
    dateOfBirth: yup.date(),
    dateOfRegistration: yup.date(),
    maritalStatusId: yup.number(),
    sexId: yup.number(),
    phone: yup.string(),
    ninNumber: yup.string(),
    isDateOfBirthEstimated: yup.boolean(),
  });

  const formik = useFormik({
    initialValues: form1InitialValues,
    onSubmit,
    validationSchema: Form1ValidationSchema,
  });
  return { formik };
};

export const useValidateForm2ValuesHook = (onSubmit) => {
  const form2InitialValues = {
    afp: "",
    albumin: "",
    alt: "",
    altValue: "",
    antiHDV: "",
    apriScore: "",
    ascites: "",
    ast: "",
    astValue: "",
    childPughScore: "",
    liverBiopsyStage: "",
    comment: "",
    commobidities: "",
    creatinine: "",
    ctScan: "",
    dateHbvDnaResultReported: "",
    dateHbvSampleCollected: "",
    dateHbvSampleRequested: "",
    dateHbvTestRequested: "",
    dateHbvDnaTestRequested: "",
    diagnosis_result: "",
    fib4: "",
    fibroscan: "",
    gradeOfEncephalopathy: "",
    hbeAg: "",
    hbsAgQuantification: "",
    hbvDna: "",
    hvbDnaValue: "",
    hcvRNA: "",
    hcRnaValue: "",
    hepatitisCoinfection: "",
    stagingDateOfLiverBiopsy: "",
    pst: "",
    pstValue: "",
    pmtctEligible: "",
    prothrombinTimeNR: "",
    severityOfAscites: "",
    multipleInfection: "",
    stagingDateForLiverBiopsy: "",
    totalBiliRubin: "",
    directBiliribin: "",
    treatmentEligible: "",
    ultrasoundScan: "",
    urea: "",
  };

  const Form2ValidationSchema = yup.object({
    afp: yup.string(),
    albumin: yup.string(),
    alt: yup.string(),
    altValue: yup.string(),
    antiHDV: yup.string(),
    apriScore: yup.string(),
    ascites: yup.string(),
    ast: yup.string(),
    astValue: yup.string(),
    childPughScore: yup.string(),
    liverBiopsyStage: yup.string(),
    comment: yup.string(),
    commobidities: yup.string(),
    creatinine: yup.string(),
    ctScan: yup.string(),
    dateHbvDnaResultReported: yup.date(),
    dateHbvSampleCollected: yup.date(),
    dateHbvSampleRequested: yup.date(),
    dateHbvTestRequested: yup.date(),
    dateHbvDnaTestRequested: yup.date(),
    diagnosis_result: yup.string(),
    fib4: yup.string(),
    fibroscan: yup.string(),
    gradeOfEncephalopathy: yup.number(),
    hbeAg: yup.string(),
    hbsAgQuantification: yup.string(),
    hbvDna: yup.string(),
    hvbDnaValue: yup.string(),
    hcvRNA: yup.string(),
    hcRnaValue: yup.string(),
    hepatitisCoinfection: yup.string(),
    stagingDateOfLiverBiopsy: yup.string(),
    pst: yup.string(),
    pstValue: yup.string(),
    pmtctEligible: yup.string(),
    prothrombinTimeNR: yup.string(),
    severityOfAscites: yup.string(),
    multipleInfection: yup.string(),
    stagingDateForLiverBiopsy: yup.date(),
    totalBiliRubin: yup.string(),
    directBiliribin: yup.string(),
    treatmentEligible: yup.string(),
    ultrasoundScan: yup.string(),
    urea: yup.string(),
  });

  const formik = useFormik({
    initialValues: form2InitialValues,
    onSubmit,
    validationSchema: Form2ValidationSchema,
  });
  return { formik };
};

export const useValidateForm3ValuesHook = (onSubmit) => {
  const form3InitialValues = {
    hbvDateStarted: "",
    hbvDateStopped: "",
    hbvHistoryOfAdverseEffect: "",
    hbvNewRegimen: "",
    hbvPastTreatmentRegimen: "",
    hbvReasonForTreatmentEligibility: "",
    hbvReasonsForTreatmentComment: "",
    hbvRegimeSwitchDateStarted: "",
    hbvRegimeSwitchDateStopped: "",
    hbvRegimeSwitchHistoryOfAdverseEffect: "",
    hbvRegimeSwitchNewRegimen: "",
    hbvRegimeSwitchReason: "",
    hbvTreatmentExperience: "",
    hcvAdverseEventReported: "",
    hcvDateCompleted: "",
    hcvDateStopped: "",
    hcvDateStarted: "",
    hcvHistoryOfAdverseEffect: "",
    pastTreatmentExperience: "",
    hbvPastTreatmentRegimen: "",
    hcvPrescribedDuration: "",
    hcvRegimeSwitchDateStarted: "",
    hcvRegimeSwitchDateStopped: "",
    hcvRegimeSwitchHistoryOfAdverseEffect: "",
    hcvRetreatmentAdverseEffect: "",
    hcvRetreatmentDateStarted: "",
    hcvRetreatmentDateStopped: "",
    hcvRetreatmentNewRegimen: "",
    hcvRetreatmentNewRegime: "",
    hcvRetreatmentPrescribedDuration: "",
    hcvTreatmentExperience: "",
    svr12RetreatmentDateTested: "",
    svr12RetreatmentHcvRna: "",
    svr12RetreatmentHcvRnaValue: "",
    svr12TestingDateStarted: "",
    svr12TestingHcvRna: "",
    svr12TestingHcvRnaValue: "",
  };

  const Form3ValidationSchema = yup.object({
    hbvDateStarted: yup.date(),
    hbvDateStopped: yup.date(),
    hbvHistoryOfAdverseEffect: yup.string(),
    hbvNewRegimen: yup.string(),
    hbvPastTreatmentRegimen: yup.string(),
    hbvReasonForTreatmentEligibility: yup.string(),
    hbvReasonsForTreatmentComment: yup.string(),
    hbvRegimeSwitchDateStarted: yup.date(),
    hbvRegimeSwitchDateStopped: yup.date(),
    hbvRegimeSwitchHistoryOfAdverseEffect: yup.string(),
    hbvRegimeSwitchNewRegimen: yup.string(),
    hbvRegimeSwitchReason: yup.string(),
    hbvTreatmentExperience: yup.string(),
    hcvAdverseEventReported: yup.string(),
    hcvDateCompleted: yup.date(),
    hcvDateStopped: yup.date(),
    hcvDateStarted: yup.date(),
    hcvHistoryOfAdverseEffect: yup.string(),
    pastTreatmentExperience: yup.string(),
    hbvPastTreatmentRegimen: yup.string(),
    hcvPrescribedDuration: yup.number(),
    hcvRegimeSwitchDateStarted: yup.date(),
    hcvRegimeSwitchDateStopped: yup.date(),
    hcvRegimeSwitchHistoryOfAdverseEffect: yup.string(),
    hcvRetreatmentAdverseEffect: yup.string(),
    hcvRetreatmentDateStarted: yup.date(),
    hcvRetreatmentDateStopped: yup.date(),
    hcvRetreatmentNewRegimen: yup.string(),
    hcvRetreatmentNewRegime: yup.string(),
    hcvRetreatmentPrescribedDuration: yup.string(),
    hcvTreatmentExperience: yup.string(),
    svr12RetreatmentDateTested: yup.date(),
    svr12RetreatmentHcvRna: yup.string(),
    svr12RetreatmentHcvRnaValue: yup.string(),
    svr12TestingDateStarted: yup.date(),
    svr12TestingHcvRna: yup.string(),
    svr12TestingHcvRnaValue: yup.string(),
  });

  const formik = useFormik({
    initialValues: form3InitialValues,
    onSubmit,
    validationSchema: Form3ValidationSchema,
  });
  return { formik };
};

export const useValidateFollowupFormValuesHook = (onSubmit) => {
  const followupFormIntialValue = {
    dateOfVisit: "",
    weight: "",
    height: "",
    bmi: "",
    bloodPressure: "",
    hbsAgQuantification: "",
    hbeAg: "",
    hbvDna: "",

    alt: "",
    ast: "",
    pst: "",
    totalBiliRubin: "",
    directBilirubin: "",
    albumin: "",
    apriScore: "",
    fib4: "",
    prothrombinTimeNR: "",
    urea: "",
    creatinine: "",
    ultrasoundScan: "",
    afp: "",
    fibroscan: "",
    ctScan: "",
    ascites: "",
    severityOfAscites: "",
    gradeOfEncephalopathy: "",
    childPughScore: "",
    stagingDateOfLiverBiopsy: "",
    stagingDateForLiverBiopsy: "",
    diagnosis_result: "",
    treatmentRegimen: "",
    nextAppointment: "",
    remark: "",
  };

  const FollowupFormValidationSchema = yup.object({
    dateOfVisit: yup.string(),
    weight: yup.string(),
    height: yup.string(),
    bmi: yup.string(),
    bloodPressure: yup.string(),
    hbsAgQuantification: yup.string(),
    hbeAg: yup.string(),
    hbvDna: yup.string(),

    alt: yup.string(),
    ast: yup.string(),
    pst: yup.string(),
    totalBiliRubin: yup.string(),
    directBilirubin: yup.string(),
    albumin: yup.string(),
    apriScore: yup.string(),
    fib4: yup.string(),
    prothrombinTimeNR: yup.string(),
    urea: yup.string(),
    creatinine: yup.string(),
    ultrasoundScan: yup.string(),
    afp: yup.string(),
    fibroscan: yup.string(),
    ctScan: yup.string(),
    ascites: yup.string(),
    severityOfAscites: yup.string(),
    gradeOfEncephalopathy: yup.string(),
    childPughScore: yup.string(),
    stagingDateOfLiverBiopsy: yup.string(),
    stagingDateForLiverBiopsy: yup.string(),
    diagnosis_result: yup.string(),
  });

  const formik = useFormik({
    initialValues: followupFormIntialValue,
    onSubmit,
    validationSchema: FollowupFormValidationSchema,
  });
  return { formik };
};
